# Template file for 't2linux6.13'
pkgname=t2linux6.13
version=6.13.4
revision=1
short_desc="Linux kernel for Apple T2 machines (${version%.*} series)"
maintainer="Dexxiez <toby@boulton.net.au>"
license="GPL-2.0-only"
homepage="https://t2linux.org"
distfiles="${KERNEL_SITE}/kernel/v${version%%.*}.x/linux-${version%.*}.tar.xz"

if [ "${version##*.}" != 0 ]; then
	distfiles+=" ${KERNEL_SITE}/kernel/v${version%%.*}.x/patch-${version}.xz"
	skip_extraction="patch-${version}.xz"
fi

# Add checksum for the kernel source and patch
checksum="e79dcc6eb86695c6babfb07c2861912b635d5075c6cd1cd0567d1ea155f80d6e
 2150bc51625fbf8fb051c11c31db8f2c69d6634c9a4754bdce59cd7657689428"
python_version=3

# T2 machines are x86_64
archs="x86_64*"

nodebug=yes
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes
preserve=yes

# Dependencies needed to build the kernel
hostmakedepends="tar xz bc elfutils-devel flex gmp-devel kmod libmpc-devel
 pkg-config openssl-devel perl uboot-mkimage cpio pahole python3 zstd"

_kernver="${version}_${revision}"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

# For reproducible build
export KBUILD_BUILD_TIMESTAMP=$(LC_ALL=C date -ud @${SOURCE_DATE_EPOCH:-0})
export KBUILD_BUILD_USER=voidlinux
export KBUILD_BUILD_HOST=voidlinux

if [ "$CROSS_BUILD" ]; then
	_cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
fi

pre_patch() {
	# Apply the official kernel patch if needed
	if [ ! -f $XBPS_SRCDISTDIR/$pkgname-$version/patch-${version}.xz ]; then
		return
	fi
	xzcat $XBPS_SRCDISTDIR/$pkgname-$version/patch-${version}.xz |
		patch -sNp1 -F0
		
	# Apply custom T2 Linux patches
	# You should place your custom patches in the FILESDIR directory
	for patch in ${FILESDIR}/t2-patches/*.patch; do
		if [ -f "$patch" ]; then
			msg_normal "Applying custom T2 patch: $patch\n"
			patch -sNp1 -i "$patch"
		fi
	done
}

do_configure() {
	# Use custom .config file for T2 machines if available
	if [ -f ${FILESDIR}/t2-dotconfig ]; then
		msg_normal "Using custom T2 .config file\n"
		cp -f ${FILESDIR}/t2-dotconfig .config
		make ${makejobs} ARCH=x86_64 ${_cross} oldconfig
	else
		msg_error "No custom T2 .config file found. Please provide one.\n"
		return 1
	fi

	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_${revision}\"|" .config
}

do_build() {
	local _args="bzImage modules"
	export LDFLAGS=
	make ARCH=x86_64 ${_cross} ${makejobs} prepare
	make ARCH=x86_64 ${_cross} ${makejobs} ${_args}
}

do_install() {
	local hdrdest

	# Run depmod after compressing modules - makes depmod.sh a noop
	sed -i '2iexit 0' scripts/depmod.sh

	vmkdir usr/lib
	rm -f ${DESTDIR}/lib # Remove existing link if it exists
	ln -sf usr/lib/ ${DESTDIR} # Force creation of the symbolic link	

	# Install kernel, firmware and modules
	make ${makejobs} ARCH=x86_64 INSTALL_MOD_PATH=${DESTDIR} ${_cross} modules_install

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	vinstall .config 644 boot config-${_kernver}
	vinstall System.map 644 boot System.map-${_kernver}
	vinstall arch/x86/boot/bzImage 644 boot vmlinuz-${_kernver}

	# Switch to /usr.
	vmkdir usr

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 Kbuild ${hdrdest}/Kbuild
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config
	for file in $(find . -name Kconfig\*); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	for file in $(find arch/x86 scripts -name module.lds -o -name Kbuild.platforms -o -name Platform); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	mkdir -p ${hdrdest}/include
	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in acpi asm-generic clocksource config crypto drm generated linux vdso \
		math-emu media net pcmcia scsi sound trace uapi video xen dt-bindings; do
		if [ -d include/$i ]; then
			cp -a include/$i ${hdrdest}/include
		fi
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/x86
	cp -a arch/x86/include ${hdrdest}/arch/x86

	# Copy files necessary for later builds, like nvidia and vmware
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}
	mkdir -p ${hdrdest}/security/selinux
	cp -a security/selinux/include ${hdrdest}/security/selinux
	mkdir -p ${hdrdest}/tools/include
	cp -a tools/include/tools ${hdrdest}/tools/include

	if [ -d "arch/x86/tools" ]; then
		cp -a "arch/x86/tools" "${hdrdest}/arch/x86"
	fi
	cp -a kernel/time/timeconst.bc "${hdrdest}/kernel/time"
	cp -a kernel/bounds.c "${hdrdest}/kernel"
	mkdir -p "${hdrdest}/arch/x86/entry/syscalls"
	cp -a arch/x86/entry/syscalls/syscall_32.tbl "${hdrdest}/arch/x86/entry/syscalls"

	mkdir -p ${hdrdest}/arch/x86/kernel
	cp arch/x86/Makefile ${hdrdest}/arch/x86
	cp arch/x86/kernel/asm-offsets.s ${hdrdest}/arch/x86/kernel

	# Add headers for lirc package
	# pci
	for i in bt8xx cx88 saa7134; do
		mkdir -p ${hdrdest}/drivers/media/pci/${i}
		cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
	done
	# usb
	for i in em28xx pwc; do
		mkdir -p ${hdrdest}/drivers/media/usb/${i}
		cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
	done
	# i2c
	mkdir -p ${hdrdest}/drivers/media/i2c
	cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
	for i in cx25840; do
		mkdir -p ${hdrdest}/drivers/media/i2c/${i}
		cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
	done

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# Add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/lgdt330x.h \
		${hdrdest}/drivers/media/dvb-frontends/
	cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

	# Add dvb headers
	mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
	cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
	mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
	mkdir -p ${hdrdest}/drivers/media/tuners
	cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs/libxfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	# Add objtool binary, needed to build external modules with dkms
	mkdir -p ${hdrdest}/tools/objtool
	cp tools/objtool/objtool ${hdrdest}/tools/objtool

	msg_normal "$pkgver: compressing modules, please wait...\n"
	(
	cd ${DESTDIR}
	find ./ -name '*.ko' -print0 | \
		xargs -0r -n1 -P ${XBPS_MAKEJOBS} xz -9
	)
	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
	rm -f ${DESTDIR}/lib
}

t2linux6.13-headers_package() {
	preserve=yes
	nostrip=yes
	noshlibprovides=yes
	short_desc+=" - source headers for 3rd party modules"
	pkg_install() {
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	}
}
